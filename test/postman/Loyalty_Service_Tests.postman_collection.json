{
	"info": {
		"_postman_id": "loyalty-service-tests",
		"name": "Loyalty Service Tests",
		"description": "Complete test suite for the Go Loyalty & Benefits Platform Loyalty Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health & Monitoring",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/healthz",
							"host": ["{{base_url}}"],
							"path": ["healthz"]
						},
						"description": "Test the service health endpoint"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response.status).to.eql('ok');",
									"    pm.expect(response).to.have.property('timestamp');",
									"    pm.expect(response).to.have.property('service');",
									"});",
									"",
									"pm.test(\"Service name is correct\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.service).to.eql('go-loyalty-benefits');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Metrics Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/metrics",
							"host": ["{{base_url}}"],
							"path": ["metrics"]
						},
						"description": "Test the Prometheus metrics endpoint"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response contains metrics data\", function () {",
									"    const response = pm.response.text();",
									"    pm.expect(response).to.include('go_');",
									"    pm.expect(response).to.include('process_');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Basic health and monitoring endpoints"
		},
		{
			"name": "Public Endpoints",
			"item": [
				{
					"name": "Get Available Rewards",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/loyalty/rewards",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "rewards"]
						},
						"description": "Get all available rewards (public endpoint, no auth required)"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Rewards data is array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array');",
									"    pm.expect(response.data.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Reward structure is correct\", function () {",
									"    const response = pm.response.json();",
									"    if (response.data.length > 0) {",
									"        const reward = response.data[0];",
									"        pm.expect(reward).to.have.property('id');",
									"        pm.expect(reward).to.have.property('name');",
									"        pm.expect(reward).to.have.property('description');",
									"        pm.expect(reward).to.have.property('points_cost');",
									"        pm.expect(reward).to.have.property('category');",
									"        pm.expect(reward).to.have.property('is_active');",
									"    }",
									"});",
									"",
									"// Store first reward for later tests",
									"if (pm.response.json().data.length > 0) {",
									"    pm.collectionVariables.set('sample_reward_id', pm.response.json().data[0].id);",
									"    pm.collectionVariables.set('sample_reward_points', pm.response.json().data[0].points_cost);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoints that don't require authentication"
		},
		{
			"name": "Authentication Tests",
			"item": [
				{
					"name": "Get Balance (No Token) - Should Fail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/loyalty/balance",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "balance"]
						},
						"description": "Test that protected endpoint rejects requests without JWT token"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response.message).to.include('Authorization');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Earn Points (No Token) - Should Fail",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"test-user-123\",\n  \"amount\": 100,\n  \"description\": \"Test purchase\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/loyalty/earn",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "earn"]
						},
						"description": "Test that protected endpoint rejects requests without JWT token"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response.message).to.include('Authorization');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Test authentication requirements for protected endpoints"
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Create Test User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{auth_base_url}}/v1/auth/register",
							"host": ["{{auth_base_url}}"],
							"path": ["v1", "auth", "register"]
						},
						"description": "Create a test user in the auth service to get JWT token"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has JWT token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response.access_token).to.not.be.empty;",
									"    pm.expect(response).to.have.property('user');",
									"    pm.expect(response.user).to.have.property('id');",
									"});",
									"",
									"// Store the JWT token and user ID for later tests",
									"if (pm.response.json().access_token) {",
									"    pm.collectionVariables.set('jwt_token', pm.response.json().access_token);",
									"    pm.collectionVariables.set('test_user_id', pm.response.json().user.id);",
									"    pm.collectionVariables.set('test_user_email', pm.response.json().user.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login Test User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{auth_base_url}}/v1/auth/login",
							"host": ["{{auth_base_url}}"],
							"path": ["v1", "auth", "login"]
						},
						"description": "Login with test user to get fresh JWT token"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JWT token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response.access_token).to.not.be.empty;",
									"});",
									"",
									"// Store the JWT token for later tests",
									"if (pm.response.json().access_token) {",
									"    pm.collectionVariables.set('jwt_token', pm.response.json().access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "User creation and authentication for testing"
		},
		{
			"name": "Protected Endpoints (With Auth)",
			"item": [
				{
					"name": "Get User Balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/loyalty/balance",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "balance"]
						},
						"description": "Get current user's loyalty balance (requires JWT token)"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User data structure is correct\", function () {",
									"    const response = pm.response.json();",
									"    const user = response.data;",
									"    pm.expect(user).to.have.property('id');",
									"    pm.expect(user).to.have.property('email');",
									"    pm.expect(user).to.have.property('points');",
									"    pm.expect(user).to.have.property('tier');",
									"    pm.expect(user).to.have.property('created_at');",
									"    pm.expect(user).to.have.property('updated_at');",
									"});",
									"",
									"pm.test(\"Initial points are 0\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.points).to.eql(0);",
									"});",
									"",
									"pm.test(\"Initial tier is Bronze\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.tier).to.eql('Bronze');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Earn Points",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{test_user_id}}\",\n  \"amount\": 100,\n  \"description\": \"Test purchase at coffee shop\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/loyalty/earn",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "earn"]
						},
						"description": "Earn points for the authenticated user"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Transaction data is correct\", function () {",
									"    const response = pm.response.json();",
									"    const transaction = response.data.transaction;",
									"    pm.expect(transaction).to.have.property('id');",
									"    pm.expect(transaction).to.have.property('user_id');",
									"    pm.expect(transaction).to.have.property('type');",
									"    pm.expect(transaction).to.have.property('amount');",
									"    pm.expect(transaction).to.have.property('description');",
									"    pm.expect(transaction.type).to.eql('earn');",
									"    pm.expect(transaction.amount).to.eql(100);",
									"});",
									"",
									"pm.test(\"User points increased\", function () {",
									"    const response = pm.response.json();",
									"    const user = response.data.user;",
									"    pm.expect(user.points).to.eql(100);",
									"});",
									"",
									"pm.test(\"User tier is still Bronze\", function () {",
									"    const response = pm.response.json();",
									"    const user = response.data.user;",
									"    pm.expect(user.tier).to.eql('Bronze');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Updated Balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/loyalty/balance",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "balance"]
						},
						"description": "Check updated balance after earning points"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Points increased to 100\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.points).to.eql(100);",
									"});",
									"",
									"pm.test(\"Tier is still Bronze\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.tier).to.eql('Bronze');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Earn More Points (Reach Silver)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{test_user_id}}\",\n  \"amount\": 1000,\n  \"description\": \"Large purchase to reach Silver tier\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/loyalty/earn",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "earn"]
						},
						"description": "Earn enough points to reach Silver tier (1000+ points)"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Total points is 1100\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.user.points).to.eql(1100);",
									"});",
									"",
									"pm.test(\"Tier upgraded to Silver\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.user.tier).to.eql('Silver');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Transaction History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/loyalty/history",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "history"]
						},
						"description": "Get user's transaction history"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Transaction history is array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array');",
									"    pm.expect(response.data.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Transactions have correct structure\", function () {",
									"    const response = pm.response.json();",
									"    if (response.data.length > 0) {",
									"        const transaction = response.data[0];",
									"        pm.expect(transaction).to.have.property('id');",
									"        pm.expect(transaction).to.have.property('user_id');",
									"        pm.expect(transaction).to.have.property('type');",
									"        pm.expect(transaction).to.have.property('amount');",
									"        pm.expect(transaction).to.have.property('description');",
									"        pm.expect(transaction).to.have.property('created_at');",
									"    }",
									"});",
									"",
									"pm.test(\"Total transactions count\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.length).to.be.greaterThanOrEqual(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Spend Points",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{test_user_id}}\",\n  \"amount\": 100,\n  \"description\": \"Redeemed free coffee reward\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/loyalty/spend",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "spend"]
						},
						"description": "Spend points to redeem a reward"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Transaction type is spend\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.transaction.type).to.eql('spend');",
									"});",
									"",
									"pm.test(\"Points decreased to 1000\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.user.points).to.eql(1000);",
									"});",
									"",
									"pm.test(\"Tier remains Silver\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.user.tier).to.eql('Silver');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Test protected endpoints with valid JWT authentication"
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Spend More Points Than Available",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{test_user_id}}\",\n  \"amount\": 2000,\n  \"description\": \"Try to spend more points than available\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/loyalty/spend",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "spend"]
						},
						"description": "Test error handling when trying to spend more points than available"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response.message).to.include('Insufficient');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Invalid Request Body",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"\",\n  \"amount\": -50,\n  \"description\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/loyalty/earn",
							"host": ["{{base_url}}"],
							"path": ["v1", "loyalty", "earn"]
						},
						"description": "Test error handling with invalid request data"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Test error handling and edge cases"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to set up test data",
					"if (!pm.collectionVariables.get('test_user_email')) {",
					"    pm.collectionVariables.set('test_user_email', 'test-' + Date.now() + '@example.com');",
					"}",
					"",
					"if (!pm.collectionVariables.get('test_user_password')) {",
					"    pm.collectionVariables.set('test_user_password', 'TestPassword123!');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8082",
			"type": "string"
		},
		{
			"key": "auth_base_url",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "test_user_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_user_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_user_id",
			"value": "",
			"type": "string"
		}
	]
}
